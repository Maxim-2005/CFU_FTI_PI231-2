from random import randint
from numpy.linalg import solve as gauss
import numpy as np
from math import exp
from dsmltf import scale, mult_r_squared, mult_predict, dot

# Генерация данных для решения задачи: пообедать сегодня ?
# Характеристики: 
# 1 - хочется есть (1) или не хочется есть (0)
# 2 - голодный (1) сытый (0)
# 3 - приготовить (1) или купить (0)
# 4 - купить попить (1) или в сухомятку (0)
# 5 - врендая еда (1) или полезная (0)
# 6 - наешься (1) или не наешься (0)
# 7 - сложность блюда от 1 до 5
# Результат: решение, пообедаю ли я сегодня (1 - да, 0 - нет)

def make_data() -> list:
    data = []
    for i in range(30):
        # Генерация случайных данных для каждого признака
        arr = [randint(0,1), randint(0,1), randint(0,1), randint(0,1), randint(0,1), randint(0,1), randint(1,5)]
        
        # Вывод информации по каждому признаку
        print("хочется есть" * arr[0] + "не хочется есть" * (not arr[0]))
        print("голодный" * arr[1] + "сытый" * (not arr[1]))
        print("приготовить" * arr[2] + "купить" * (not arr[2]))
        print("купить попить" * arr[3] + "в сухомятку" * (not arr[3]))
        print("врендая еда" * arr[4] + "полезная" * (not arr[4]))
        print("наешься" * arr[5] + "не наешься" * (not arr[5]))
        print(f"сложность блюда на {arr[6]}")
        
        # Запрашиваем у пользователя, пойдет ли он на пару
        arr.append(int(input("Пообедаю ли я сегодня? ")))
        data.append(arr)
    return data

# Функция для решения линейной регрессии методом Гаусса
def regression(vectors, y):  # vectors – это список векторов
    n = len(y)
    matrix = []
    free = []
    
    # Формируем матрицу системы уравнений
    matrix.append([sum(x) for x in vectors] + [n])
    free.append(sum(y))
    for _, xl in enumerate(vectors):
        matrix.append([dot(x, xl) for x in vectors] + [sum(xl)])
        free.append(dot(y, xl))
    # Решаем систему методом Гаусса
    beta = gauss(np.array(matrix, dtype="float64"), np.array(free, dtype="float64"))
    return beta  # свободный коэффициент находится в конце beta[-1]

def main():
    # Предварительно собранные данные
    data = [[1, 1, 0, 1, 0, 0, 3, 1], [1, 0, 1, 1, 1, 0, 5, 1], [1, 1, 1, 0, 0, 0, 3, 1], 
            [1, 1, 0, 1, 1, 0, 4, 1], [1, 1, 1, 0, 1, 0, 4, 1], [0, 0, 0, 0, 0, 0, 1, 0], 
            [0, 1, 0, 1, 0, 1, 5, 1], [0, 1, 0, 0, 0, 0, 3, 0], [1, 0, 0, 0, 1, 0, 2, 0], 
            [0, 1, 0, 0, 1, 1, 3, 1], [1, 0, 1, 1, 1, 1, 4, 1], [0, 1, 0, 1, 0, 0, 5, 0], 
            [1, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 2, 0], [0, 1, 0, 1, 1, 0, 2, 0], 
            [1, 1, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 0, 1, 5, 1], [1, 0, 0, 0, 1, 1, 3, 1], 
            [1, 0, 1, 0, 0, 0, 4, 1], [0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 0, 5, 0], 
            [0, 1, 1, 0, 1, 1, 4, 1], [1, 1, 1, 1, 1, 1, 5, 1], [0, 1, 0, 0, 0, 1, 1, 0], 
            [0, 1, 1, 1, 1, 1, 5, 1], [0, 1, 0, 1, 0, 1, 3, 1], [0, 1, 1, 0, 0, 1, 4, 1], 
            [0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 1, 3, 1], [0, 0, 0, 0, 0, 0, 5, 0]]
    
    # Инициализация матриц для обучения
    vectors = [[], [], [], [], [], [], []]
    result = []
    
    # Масштабируем данные
    dat = scale(data)
    
    # Переводим данные в нужный формат для регрессии
    for i in range(len(dat[:-10])):
        for j in range(7):
            vectors[j].append(dat[i][j])
        result.append(dat[i][-1])
    
    # Выполняем линейную регрессию для нахождения коэффициентов
    beta = regression(vectors, result)
    print(f"Коэффициенты: ", *beta)
    
    # Вычисляем метрику ошибки по квадратам
    R = mult_r_squared([i[:-1] for i in dat[-10:]], result, beta)
    
    # Тестируем на отложенной выборке
    for i in range(20, 30):
        Y = mult_predict(dat[i][:-1], beta)
        answer = round(exp(Y) / (1 + exp(Y)))  # Логистическая функция для предсказания
        if data[i][-1] != answer:
            print(f"Ошибка предсказания, должно быть {data[i][-1]}, а получилось {answer}, data:{data[i]}")
    
    print(f"Ошибка по квадратам: {R}")

# Запуск основной программы
if __name__ == "__main__":
    main()
